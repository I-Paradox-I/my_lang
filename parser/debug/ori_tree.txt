TranslationUnitDecl 0xbff5c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0xbffe88 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0xbffb60 '__int128'
|-TypedefDecl 0xbffef8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0xbffb80 'unsigned __int128'
|-TypedefDecl 0xc00200 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0xbfffd0 'struct __NSConstantString_tag'
|   `-Record 0xbfff50 '__NSConstantString_tag'
|-TypedefDecl 0xc002a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0xc00260 'char *'
|   `-BuiltinType 0xbff660 'char'
|-TypedefDecl 0xc3ecf0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0xc00540 'struct __va_list_tag [1]' 1 
|   `-RecordType 0xc00380 'struct __va_list_tag'
|     `-Record 0xc00300 '__va_list_tag'
|-FunctionDecl 0xc3eda8 </workspace/SYsU-lang/parser/debug/test.sysu.c:2:1, line:11:1> line:2:5 used ifElse 'int ()'
| `-CompoundStmt 0xc3f1f0 <col:14, line:11:1>
|   |-DeclStmt 0xc3ef10 <line:3:3, col:8>
|   | `-VarDecl 0xc3eea8 <col:3, col:7> col:7 used a 'int'
|   |-BinaryOperator 0xc3ef68 <line:4:3, col:7> 'int' '='
|   | |-DeclRefExpr 0xc3ef28 <col:3> 'int' lvalue Var 0xc3eea8 'a' 'int'
|   | `-IntegerLiteral 0xc3ef48 <col:7> 'int' 5
|   |-IfStmt 0xc3f120 <line:5:3, line:9:3> has_else
|   | |-UnaryOperator 0xc3efc0 <line:5:7, col:8> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0xc3efa8 <col:8> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0xc3ef88 <col:8> 'int' lvalue Var 0xc3eea8 'a' 'int'
|   | |-CompoundStmt 0xc3f038 <col:11, line:7:3>
|   | | `-BinaryOperator 0xc3f018 <line:6:5, col:9> 'int' '='
|   | |   |-DeclRefExpr 0xc3efd8 <col:5> 'int' lvalue Var 0xc3eea8 'a' 'int'
|   | |   `-IntegerLiteral 0xc3eff8 <col:9> 'int' 25
|   | `-CompoundStmt 0xc3f108 <line:7:10, line:9:3>
|   |   `-BinaryOperator 0xc3f0e8 <line:8:5, col:13> 'int' '='
|   |     |-DeclRefExpr 0xc3f050 <col:5> 'int' lvalue Var 0xc3eea8 'a' 'int'
|   |     `-BinaryOperator 0xc3f0c8 <col:9, col:13> 'int' '*'
|   |       |-ImplicitCastExpr 0xc3f0b0 <col:9> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0xc3f070 <col:9> 'int' lvalue Var 0xc3eea8 'a' 'int'
|   |       `-IntegerLiteral 0xc3f090 <col:13> 'int' 2
|   `-ReturnStmt 0xc3f1e0 <line:10:3, col:14>
|     `-ParenExpr 0xc3f1c0 <col:10, col:14> 'int'
|       `-BinaryOperator 0xc3f1a0 <col:11, col:13> 'int' '+'
|         |-ImplicitCastExpr 0xc3f188 <col:11> 'int' <LValueToRValue>
|         | `-DeclRefExpr 0xc3f148 <col:11> 'int' lvalue Var 0xc3eea8 'a' 'int'
|         `-IntegerLiteral 0xc3f168 <col:13> 'int' 2
`-FunctionDecl 0xc3f248 <line:14:1, line:16:1> line:14:5 main 'int ()'
  `-CompoundStmt 0xc3f3a8 <col:12, line:16:1>
    `-ReturnStmt 0xc3f398 <line:15:3, col:19>
      `-ParenExpr 0xc3f378 <col:10, col:19> 'int'
        `-CallExpr 0xc3f358 <col:11, col:18> 'int'
          `-ImplicitCastExpr 0xc3f340 <col:11> 'int (*)()' <FunctionToPointerDecay>
            `-DeclRefExpr 0xc3f2e8 <col:11> 'int ()' Function 0xc3eda8 'ifElse' 'int ()'
